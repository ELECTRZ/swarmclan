import requests
import psycopg2
import time

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î ===
DB_CONFIG = {
    "dbname": "tekkenmatches",
    "user": "tekkenadmin",
    "password": "SD4Mb7Jnc5X5",
    "host": "localhost"
}

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL ===
def connect_db():
    return psycopg2.connect(**DB_CONFIG)

# === –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã ===
def init_db(conn):
    print("üîß [DEBUG] –í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è init_db")
    try:
        with conn.cursor() as cur:
            cur.execute('''
                CREATE TABLE IF NOT EXISTS replays (
                    battle_id TEXT PRIMARY KEY,
                    battle_at INTEGER,
                    p1_name TEXT,
                    p1_polaris_id TEXT,
                    p1_lang TEXT,
                    p1_power INTEGER,
                    p1_rank INTEGER,
                    p1_chara_id INTEGER,
                    p1_rounds INTEGER,
                    p1_rating_before INTEGER,
                    p1_rating_change INTEGER,
                    p2_name TEXT,
                    p2_polaris_id TEXT,
                    p2_lang TEXT,
                    p2_power INTEGER,
                    p2_rank INTEGER,
                    p2_chara_id INTEGER,
                    p2_rounds INTEGER,
                    p2_rating_before INTEGER,
                    p2_rating_change INTEGER,
                    winner INTEGER,
                    stage_id INTEGER,
                    battle_type INTEGER,
                    game_version TEXT
                )
            ''')
            conn.commit()
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ replays —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")
        conn.rollback()

# === –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ before –∏–∑ API ===
def get_latest_before():
    url = "https://wank.wavu.wiki/api/replays?_format=json"
    print("üîÑ –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π before...")
    try:
        response = requests.get(url, headers={"Accept-Encoding": "gzip, deflate"}, timeout=10)
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ before: {response.status_code}")
            return None

        replays = response.json()
        if not replays:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ")
            return None

        latest_battle = max(replays, key=lambda b: b["battle_at"])
        before = latest_battle["battle_at"]
        print(f"üïí –ü–æ—Å–ª–µ–¥–Ω–∏–π battle_at: {before}")
        return before
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ before]: {e}")
        return None

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –±–æ—è ===
def save_battle(conn, battle):
    with conn.cursor() as cur:
        try:
            cur.execute('''
                INSERT INTO replays VALUES (
                    %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,
                    %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,
                    %s, %s, %s, %s
                )
                ON CONFLICT (battle_id) DO NOTHING
            ''', (
                battle["battle_id"],
                battle["battle_at"],
                battle.get("p1_name", ""),
                battle.get("p1_polaris_id", ""),
                battle.get("p1_lang", ""),
                battle.get("p1_power", None),
                battle.get("p1_rank", None),
                battle.get("p1_chara_id", None),
                battle.get("p1_rounds", None),
                battle.get("p1_rating_before", None),
                battle.get("p1_rating_change", None),
                battle.get("p2_name", ""),
                battle.get("p2_polaris_id", ""),
                battle.get("p2_lang", ""),
                battle.get("p2_power", None),
                battle.get("p2_rank", None),
                battle.get("p2_chara_id", None),
                battle.get("p2_rounds", None),
                battle.get("p2_rating_before", None),
                battle.get("p2_rating_change", None),
                battle.get("winner", None),
                battle.get("stage_id", None),
                battle.get("battle_type", None),
                battle.get("game_version", "")
            ))
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –±–æ–π {battle['battle_id']}")
            conn.commit()
        except Exception as e:
            print(f"[‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏]: {e}")
            conn.rollback()

# === –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∑–∞–≥—Ä—É–∑–∫–∏ ===
def fetch_and_save():
    conn = connect_db()
    init_db(conn)

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ before
    before = get_latest_before() or 1751405520  # –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏

    while True:
        url = f" https://wank.wavu.wiki/api/replays?before={before}"
        print(f"üì° –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å {url}...")

        response = requests.get(url, headers={"Accept-Encoding": "gzip, deflate"}, timeout=10)

        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}. –ñ–¥—ë–º 60 —Å–µ–∫—É–Ω–¥...")
            time.sleep(60)
            continue

        try:
            replays = response.json()
        except requests.exceptions.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            time.sleep(60)
            continue

        count = 0
        for battle in replays:
            if (battle.get("p1_lang") == "ru" or battle.get("p2_lang") == "ru") and battle.get("battle_type") == 2:
                save_battle(conn, battle)
                count += 1

        print(f"üì• –ü–æ–ª—É—á–µ–Ω–æ {len(replays)} –±–æ—ë–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥.")
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {count} —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã—Ö —Ä–∞–Ω–≥–æ–≤—ã—Ö –±–æ—ë–≤")

        if replays:
            before = replays[-1]["battle_at"] - 1
            print(f"üïí –°–ª–µ–¥—É—é—â–∏–π before: {before}")

        time.sleep(600)  # –∂–¥—ë–º 10 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º

# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
if __name__ == "__main__":
    fetch_and_save()